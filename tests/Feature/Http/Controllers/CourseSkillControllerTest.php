<?php

namespace Tests\Feature\Http\Controllers;

use App\Models\Course;
use App\Models\Skills\Skill;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

/**
 * @see \App\Http\Controllers\CourseSkillController
 */
class CourseSkillControllerTest extends TestCase
{
    use RefreshDatabase;

    public function setUp(): void
    {
        parent::setUp();

        $this->setSharedVariables();
        $this->seed('TestSeeder');
    }

    /** @test */
    public function export_returns_an_ok_response()
    {
        $this->logAdmin();
        $course = factory(\App\Models\Course::class)->create();

        $response = $this->get(route('course-skills-export', $course));

        $response->assertOk();
    }

    /** @test */
    public function export_course_syllabus_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $course = factory(\App\Models\Course::class)->create();

        $response = $this->get(route('exportCourseSyllabus', [$course]));

        $response->assertOk();

        // TODO: perform additional assertions
    }

    /** @test */
    public function get_returns_an_ok_response()
    {
        $this->logAdmin();
        $course = factory(\App\Models\Course::class)->create();
        $skill = factory(Skill::class)->create();
        $course->skills()->attach($skill, ['weight' => 1]);

        $response = $this->get(route('courseSkillsGetJson', $course));
        $skillsResponse = $response->json();

        $response->assertOk();
        $this->assertEquals($skillsResponse[1][0]['id'], $skill->id);
        $this->assertEquals($skillsResponse[1][0]['name'], $skill->name);
    }

    /**
     * @test
     */
    public function import_returns_an_ok_response()
    {
        $this->markTestIncomplete('This test case was generated by Shift. When you are ready, remove this line and complete this test case.');

        $course = factory(\App\Models\Course::class)->create();

        $response = $this->post(route('course-skills-import', [$course]), [
            // TODO: send request data
        ]);

        $response->assertRedirect(back());

        // TODO: perform additional assertions
    }

    /** @test */
    public function index_returns_an_ok_response()
    {
        $this->logAdmin();
        $course = factory(\App\Models\Course::class)->create();
        $skill = factory(Skill::class)->create();
        $course->skills()->attach($skill, ['weight' => 1]);

        $response = $this->get(route('course-skills', [$course]));

        $response->assertOk();
        $response->assertViewIs('skills.course');
        $response->assertViewHas('course');
    }

    /** @test */
    public function set_skills_change_the_skill_order()
    {
        $this->logAdmin();
        $course = factory(\App\Models\Course::class)->create();
        $skill = factory(Skill::class)->create([
            'order' => 1,
        ]);

        $response = $this->put(
            route('courseSkillsSetBulk', $course),
            [
                'skills' => [
                    array_merge(
                        $skill->toArray(),
                        [
                            'order' => 2,
                        ]
                    ),
                ],
            ]
        );

        $response->assertOk();
        $this->assertEquals($skill->fresh()->order, 2);
    }

    /** @test */
    public function can_add_a_skill_to_a_course()
    {
        $this->logAdmin();
        $course = factory(Course::class)->create();
        $skill = factory(Skill::class)->create();
        $this->assertEmpty($course->skills);

        $response = $this->post(
            route('courseSkillsAdd', $course),
            [
                'skill_id' => $skill->id,
            ]
        );

        $response->assertOk();
        $this->assertNotEmpty($course->fresh()->skills);
    }

    /** @test */
    public function can_remove_a_skill_from_a_course()
    {
        $this->logAdmin();
        $course = factory(Course::class)->create();
        $skill = factory(Skill::class)->create();
        $course->skills()->attach($skill, ['weight' => 1]);
        $this->assertNotEmpty($course->skills);

        $response = $this->post(
            route('courseSkillsRemove', $course),
            [
                'skill_id' => $skill->id,
            ]
        );

        $response->assertOk();
        $this->assertEmpty($course->fresh()->skills);
    }
}
